{"version":3,"sources":["api.js","components/UserCards/UserCards.js","components/SearchFilter/SearchFilter.js","App.js","serviceWorker.js","index.js"],"names":["getList","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","api","response","result","wrap","_context","prev","next","fetch","sent","ok","Error","statusText","json","abrupt","t0","console","error","stop","_x","apply","this","arguments","UserCards","item","react_default","createElement","renderprops","from","transform","to","enter","opacity","leave","config","duration","delay","props","key","id","className","style","src","image","alt","name","gender","species","SearchFilter","handleSearch","handleSortFilter","onSearchSortFilter","_ref2","target","searchInputValue","value","checked","type","defineProperty","onChange","htmlFor","placeholder","aria-label","aria-describedby","App","state","list","filterSpecies","sortOrder","isLoaded","currentPageUrl","nextPageUrl","prevPageUrl","getCurrentPage","page","then","data","_this","setState","results","info","handleClickNext","handleClickPrev","performSearch","performSortFilter","_ref3","args","esm_extends","objectSpread","runSorting","b","sortPersons","sort","filterByName","filter","toLowerCase","includes","filterBySpecies","_this$state","onClick","disabled","components_SearchFilter_SearchFilter","map","components_UserCards_UserCards","assign","length","role","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5842b9fd.chunk.js","sourcesContent":["export const getList = async api => {\r\n  try {\r\n    const response = await fetch(api);\r\n    if (!response.ok) {\r\n      throw Error(response.statusText);\r\n    }\r\n    const result = await response.json();\r\n    return result;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n","import React from 'react';\r\nimport { Spring } from 'react-spring/renderprops';\r\n\r\nconst UserCards = item => (\r\n  <Spring\r\n    from={{ transform: 'scale(0)' }}\r\n    to={{ transform: 'scale(1)' }}\r\n    enter={{ opacity: 0 }}\r\n    leave={{ opacity: 1 }}\r\n    config={{ duration: 200, delay: 200 }}\r\n  >\r\n    {props => (\r\n      <div key={item.id} className='user' style={props}>\r\n        <div className='card__main'>\r\n          <img className='card-img-top' src={item.image} alt={item.name} />\r\n          <div className='card-body'>\r\n            <h3 className='card__header'>{item.name}</h3>\r\n            <p className='list-item'>{item.gender}</p>\r\n            <p className='list-item'>{item.species}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )}\r\n  </Spring>\r\n);\r\n\r\nexport default UserCards;\r\n","import React from 'react';\r\nimport './searchfilter.css';\r\n\r\nconst SearchFilter = ({ handleSearch, handleSortFilter }) => {\r\n  const searchInputName = 'searchInput';\r\n  const onSearchSortFilter = ({ target }) => {\r\n    const searchInputValue =\r\n      target.name === searchInputName ? target.value : '';\r\n\r\n    if (target.name === searchInputName) {\r\n      handleSearch({ searchInputValue });\r\n    }\r\n    if (target.checked && target.type === 'radio') {\r\n      handleSortFilter({\r\n        [target.name]: target.value\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className='form__main'>\r\n      <div className='radio-buttons'>\r\n        <div className='sort-asc-desc'>\r\n          <div className='form-check'>\r\n            <input\r\n              onChange={onSearchSortFilter}\r\n              className='form-check-input'\r\n              type='radio'\r\n              name='sortOrder'\r\n              id='sortByAsc'\r\n              value='asc'\r\n            />\r\n            <label className='form-check-label' htmlFor='sortByAsc'>\r\n              Sort by Asc\r\n            </label>\r\n          </div>\r\n          <div className='form-check'>\r\n            <input\r\n              onChange={onSearchSortFilter}\r\n              className='form-check-input'\r\n              type='radio'\r\n              name='sortOrder'\r\n              id='sortByDesc'\r\n              value='desc'\r\n            />\r\n            <label className='form-check-label' htmlFor='sortByDesc'>\r\n              Sort by Desc\r\n            </label>\r\n          </div>\r\n        </div>\r\n        <div className='sort-asc-desc'>\r\n          <div className='form-check'>\r\n            <input\r\n              onChange={onSearchSortFilter}\r\n              className='form-check-input'\r\n              type='radio'\r\n              name='filterSpecies'\r\n              id='filterByHuman'\r\n              value='Human'\r\n            />\r\n            <label className='form-check-label' htmlFor='filterByHuman'>\r\n              Filter by Human\r\n            </label>\r\n          </div>\r\n          <div className='form-check'>\r\n            <input\r\n              onChange={onSearchSortFilter}\r\n              className='form-check-input'\r\n              type='radio'\r\n              name='filterSpecies'\r\n              id='filterByAlien'\r\n              value='Alien'\r\n            />\r\n            <label className='form-check-label' htmlFor='filterByAlien'>\r\n              Filter by Alien\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className='input-group'>\r\n        <input\r\n          type='text'\r\n          className='form-control'\r\n          name={searchInputName}\r\n          onChange={onSearchSortFilter}\r\n          placeholder='search by name... '\r\n          aria-label=\"Recipient's username\"\r\n          aria-describedby='button-addon2'\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchFilter;\r\n","import React, { Component } from 'react';\r\nimport './App.sass';\r\nimport { getList } from './api';\r\nimport UserCards from './components/UserCards/UserCards';\r\nimport SearchFilter from './components/SearchFilter/SearchFilter';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    list: null,\r\n    filterSpecies: null,\r\n    sortOrder: null,\r\n    isLoaded: false,\r\n    searchInputValue: null,\r\n    currentPageUrl: 'https://rickandmortyapi.com/api/character',\r\n    nextPageUrl: '',\r\n    prevPageUrl: ''\r\n  };\r\n\r\n  getCurrentPage = async page => {\r\n    const result = await getList(page).then(data => {\r\n      this.setState({\r\n        list: data.results,\r\n        nextPageUrl: data.info.next,\r\n        prevPageUrl: data.info.prev\r\n      });\r\n    });\r\n    return result;\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await this.getCurrentPage(this.state.currentPageUrl);\r\n    await this.setState({ isLoaded: true });\r\n  }\r\n\r\n  handleClickNext = () => {\r\n    this.getCurrentPage(this.state.nextPageUrl);\r\n  };\r\n\r\n  handleClickPrev = () => {\r\n    this.getCurrentPage(this.state.prevPageUrl);\r\n  };\r\n\r\n  performSearch = ({ searchInputValue }) => {\r\n    this.setState({ searchInputValue });\r\n  };\r\n\r\n  performSortFilter = ({ ...args }) => {\r\n    this.setState({ ...args });\r\n  };\r\n\r\n  runSorting = (a, b) => (a.name < b.name ? 1 : -1);\r\n\r\n  sortPersons = (list, state) => {\r\n    if (state === 'desc') {\r\n      return list.sort(this.runSorting);\r\n    }\r\n    return list.sort((a, b) => this.runSorting(b, a));\r\n  };\r\n\r\n  filterByName = (list, name) =>\r\n    list.filter(item => item.name.toLowerCase().includes(name));\r\n\r\n  filterBySpecies = (list, species) =>\r\n    list.filter(item => item.species === species);\r\n\r\n  render() {\r\n    const {\r\n      list,\r\n      isLoaded,\r\n      searchInputValue,\r\n      sortOrder,\r\n      filterSpecies,\r\n      prevPageUrl,\r\n      nextPageUrl\r\n    } = this.state;\r\n    let result = list;\r\n\r\n    if (sortOrder) {\r\n      result = this.sortPersons(list, sortOrder);\r\n    }\r\n\r\n    if (filterSpecies) {\r\n      result = this.filterBySpecies(list, filterSpecies);\r\n    }\r\n\r\n    if (searchInputValue) {\r\n      result = this.filterByName(list, searchInputValue);\r\n    }\r\n\r\n    if (!isLoaded) {\r\n      return (\r\n        <div className='preloader'>\r\n          <div className='pulse' />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className='container'>\r\n        <section className='main-section'>\r\n          <aside className='filter'>\r\n            <div className='buttons-group'>\r\n              <button\r\n                className='button'\r\n                onClick={this.handleClickPrev}\r\n                disabled={!prevPageUrl}\r\n              >\r\n                ← Prev Page\r\n              </button>\r\n              <button\r\n                className='button'\r\n                onClick={this.handleClickNext}\r\n                disabled={!nextPageUrl}\r\n              >\r\n                Next Page →\r\n              </button>\r\n            </div>\r\n\r\n            <SearchFilter\r\n              handleSearch={this.performSearch}\r\n              handleSortFilter={this.performSortFilter}\r\n            />\r\n          </aside>\r\n          <div className='users-wrap'>\r\n            <div className='users'>\r\n              {result.map(item => (\r\n                <UserCards key={item.id} {...item} />\r\n              ))}\r\n            </div>\r\n            {result.length === 0 ? (\r\n              <div className='not-found'>\r\n                Oops, Nothing found{' '}\r\n                <span role='img' aria-label='img'>\r\n                  😱\r\n                </span>\r\n              </div>\r\n            ) : null}\r\n          </div>\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}